ython 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> def r(n):
...   nm2 = (n+1)*(n+1)
...   nm4 = nm2*nm2
...   return 1024*nm4 + 128 * nm2 + 4
... 
>>> r(40)
2893794436
>>> r(40) / 1024
2825971.12890625
>>> r(40) / 1024**2
2759.7374305725098
>>> r(40) / 1024**3
2.6950560845434666
>>> import matplotlib.pyplot as plt
/home/nnusgart/.local/lib/python3.10/site-packages/matplotlib/projections/__init__.py:63: UserWarning: Unable to import Axes3D. This may be due to multiple versions of Matplotlib being installed (e.g. as a system package and as a pip package). As a result, the 3D projection is not available.
  warnings.warn("Unable to import Axes3D. This may be due to multiple versions of "
>>> nmaxes = np.linspace
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'np' is not defined
>>> import numpy as no
>>> import numpy as np
>>> nmaxes = np.linspace(0, 60, 61)
>>> nmaxes
array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12.,
       13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.,
       26., 27., 28., 29., 30., 31., 32., 33., 34., 35., 36., 37., 38.,
       39., 40., 41., 42., 43., 44., 45., 46., 47., 48., 49., 50., 51.,
       52., 53., 54., 55., 56., 57., 58., 59., 60.])
>>> vrams = r(nmaxes)
>>> vrams
array([1.15600000e+03, 1.69000000e+04, 8.41000000e+04, 2.64196000e+05,
       6.43204000e+05, 1.33171600e+06, 2.46490000e+06, 4.20250000e+06,
       6.72883600e+06, 1.02528040e+07, 1.50078760e+07, 2.12521000e+07,
       2.92681000e+07, 3.93630760e+07, 5.18688040e+07, 6.71416360e+07,
       8.55625000e+07, 1.07536900e+08, 1.33494916e+08, 1.63891204e+08,
       1.99204996e+08, 2.39940100e+08, 2.86624900e+08, 3.39812356e+08,
       4.00080004e+08, 4.68029956e+08, 5.44288900e+08, 6.29508100e+08,
       7.24363396e+08, 8.29555204e+08, 9.45808516e+08, 1.07387290e+09,
       1.21452250e+09, 1.36855604e+09, 1.53679680e+09, 1.72009268e+09,
       1.91931610e+09, 2.13536410e+09, 2.36915828e+09, 2.62164480e+09,
       2.89379444e+09, 3.18660250e+09, 3.50108890e+09, 3.83829812e+09,
       4.19929920e+09, 4.58518580e+09, 4.99707610e+09, 5.43611290e+09,
       5.90346356e+09, 6.40032000e+09, 6.92789876e+09, 7.48744090e+09,
       8.08021210e+09, 8.70750260e+09, 9.37062720e+09, 1.00709253e+10,
       1.08097609e+10, 1.15885225e+10, 1.24086232e+10, 1.32715008e+10,
       1.41786175e+10])
>>> plt.plot(nmaxes, vrams)
KeyboardInterrupt
>>> f = plt.figure((9, 6))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/nnusgart/.local/lib/python3.10/site-packages/matplotlib/pyplot.py", line 918, in figure
    num = int(num)  # crude validation of num argument
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'
>>> f = plt.figure(figsize=(9, 6))
>>> f
<Figure size 1800x1200 with 0 Axes>
>>> plt.plot(nmaxes, vrams)
[<matplotlib.lines.Line2D object at 0x7fcab4f956c0>]
>>> plt.xlabel("Maximum N Quantum number ($\\bar{h}$)")
Text(0.5, 0, 'Maximum N Quantum number ($\\bar{h}$)')
>>> plt.ylabel("Estimated bytes of VRAM required (B)")
Text(0, 0.5, 'Estimated bytes of VRAM required (B)')
>>> plt.show()
^CTraceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/nnusgart/.local/lib/python3.10/site-packages/matplotlib/pyplot.py", line 527, in show
    return _get_backend_mod().show(*args, **kwargs)
  File "/home/nnusgart/.local/lib/python3.10/site-packages/matplotlib/backend_bases.py", line 3448, in show
    cls.mainloop()
  File "/home/nnusgart/.local/lib/python3.10/site-packages/matplotlib/backends/_backend_gtk.py", line 207, in start_main_loop
    _application.run()  # Quits when all added windows close.
  File "/usr/lib/python3/dist-packages/gi/overrides/Gio.py", line 40, in run
    with register_sigint_fallback(self.quit):
  File "/usr/lib/python3.10/contextlib.py", line 142, in __exit__
    next(self.gen)
  File "/usr/lib/python3/dist-packages/gi/_ossighelper.py", line 237, in register_sigint_fallback
    signal.default_int_handler(signal.SIGINT, None)
KeyboardInterrupt
>>> plt.show()
>>> f = plt.figure(figsize=(9, 6))
>>> plt.plot(nmaxes, vrams)
[<matplotlib.lines.Line2D object at 0x7fcab06fcdf0>]
>>> plt.xlabel("Maximum N Quantum number ($\\bar{h}$)")
Text(0.5, 0, 'Maximum N Quantum number ($\\bar{h}$)')
>>> plt.ylabel("Estimated bytes of VRAM required (B)")
Text(0, 0.5, 'Estimated bytes of VRAM required (B)')
>>> plt.title("VRAM utilization as a function of $n_{max}$")
Text(0.5, 1.0, 'VRAM utilization as a function of $n_{max}$')
>>> plt.show()
>>> f = plt.figure(figsize=(9, 6))
>>> plt.plot(nmaxes, vrams)
[<matplotlib.lines.Line2D object at 0x7fcab05866b0>]
>>> plt.xlabel("Maximum N Quantum number ($\\bar{h}$)")
Text(0.5, 0, 'Maximum N Quantum number ($\\bar{h}$)')
>>> plt.ylabel("Estimated bytes of VRAM required (B)")
Text(0, 0.5, 'Estimated bytes of VRAM required (B)')
>>> plt.title("VRAM utilization as a function of $n_{max}$")
Text(0.5, 1.0, 'VRAM utilization as a function of $n_{max}$')
>>> plt.xlabel("Maximum N Quantum number ($\\hbar$)")
Text(0.5, 0, 'Maximum N Quantum number ($\\hbar$)')
>>> plt.savefig('Pictures/aef_vram_utilization_2024-01-04T14-47-34-EST.png')
>>> plt.show()
>>> vrams[30]
945808516.0
>>> vrams[30] / 1e9
0.945808516
>>> vrams[31] / 1e9
1.0738729
>>> vrams[33] / 1e9
1.368556036
>>> vrams[36] / 1e9
1.9193161
>>> vrams[37] / 1e9
2.1353641
>>> vrams[60] / 1e9
14.178617476
>>> r(70)
26022206596
>>> r(70) / 1e9
26.022206596
>>> r(65) / 1e9
19.430687236
>>> r(62) / 1e9
16.1315401
>>> r(61) / 1e9
15.1314601
>>> r(90) / 1e9
70.221820036
>>> r(100) / 1e9
106.559156356
>>> r(102) / 1e9
115.2534601
>>> r(40) / 1e9
2.893794436
>>> r(40) / 2**31
1.3475280422717333
>>> r(40) / 2**32
0.6737640211358666
>>> r(42) / 2**32
0.8151607820764184
>>> r(43) / 2**32
0.8936734208837152
>>> r(44) / 2**32
0.9777255365625024
>>> r(46) / 2**32
1.1634724447503686
>>> r(45) / 2**32
1.0675717601552606
>>> r(40) / 2**31
1.3475280422717333
>>> r(40) / 2**34
0.16844100528396666
>>> 2**4
16
>>> r(60) / 2**34
0.8253041582647711
>>> r(61) / 2**34
0.8807668986264616
>>> r(62) / 2**34
0.9389792161528021
>>> r(63) / 2**34
1.0000305178109556
>>> r(63) / 2**35
0.5000152589054778
>>> r(69) / 2**35
0.7155720145674422
>>> r(75) / 2**35
0.9942918421002105
>>> r(76) / 2**35
1.0476643481524661
>>> 2/3.0 * (100/40.)**6
162.76041666666666
>>> 2/3.0 * (100/40.)**6 / 24.
6.781684027777778
>>> r(100) / 2**30 / 128
0.7753199050494004
>>> 128 - (r(100) / 2**30)
28.75905215367675
>>> 128 - (r(90) / 2**30)
62.600833769887686
>>> (128 + 32) - (r(90) / 2**30)
94.60083376988769
>>> (128 + 32) - (r(100) / 2**30)
60.75905215367675
>>> 
nnusgart@nnusgart-Slim-7-ProX-14ARH7:~$ 

